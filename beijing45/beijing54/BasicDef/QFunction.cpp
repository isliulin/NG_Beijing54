#include <math.h>
#include "QFunction.h"

QValue CQFunction::m_QTable[] = {{0.0,0.50000},{0.1,0.46017},{0.2,0.42074},{0.3,0.38209},{0.4,0.34458},{0.5,0.30854},
                                 {0.6,0.27425},{0.7,0.24196},{0.8,0.21186},{0.9,0.18406},{1.0,0.15866},{1.1,0.13567},
                                 {1.2,0.11507},{1.3,0.09680},{1.4,0.08076},{1.5,0.06681},{1.6,0.05480},{1.7,0.04457},
                                 {1.8,0.03593},{1.9,0.02872},{2.0,0.02275},{2.1,0.01786},{2.2,0.01390},{2.3,0.01072},
                                 {2.4,0.00820},{2.5,0.00621},{2.6,0.00466},{2.7,0.00347},{2.8,0.00256},{2.9,0.00187},
                                 {3.0,0.00135},{3.1,0.00097},{3.2,0.00069},{3.3,0.00048},{3.4,0.00034},{3.5,0.00023},
                                 {3.6,0.00016},{3.7,0.00011},{3.8,0.00007},{3.9,0.00005} };

QValue CQFunction::m_QITable[] = {{1, 2.237},{2, 2.054},{3, 1.881},{4, 1.751},{5, 1.645},{6, 1.555},{7, 1.476},
{8, 1.405},{9, 1.341},{10, 1.282},{11, 1.227},{12, 1.175},{13, 1.126},{14, 1.080},
{15, 1.036},{16, 0.994},{17, 0.954},{18, 0.915},{19, 0.878},{20, 0.841},
{21, 0.806},{22, 0.772},{23, 0.739},{24, 0.706},{25, 0.674},{26, 0.643},
{27, 0.612},{28, 0.582},{29, 0.553},{30, 0.524},{31, 0.495},{32, 0.467},
{33, 0.439},{34, 0.412},{35, 0.385},{36, 0.358},{37, 0.331},{38, 0.305},
{39, 0.279},{40, 0.253},{41, 0.227},{42, 0.202},{43, 0.176},{44, 0.151},
{45, 0.125},{46, 0.100},{47, 0.075},{48, 0.050},{49, 0.025},{50, 0.000},
{51, -0.025},{52, -0.050},{53, -0.075},{54, -0.100},{55, -0.125},{56, -0.151},
{57, -0.176},{58, -0.202},{59, -0.227},{60, -0.253},{61, -0.279},{62, -0.305},
{63, -0.331},{64, -0.358},{65, -0.385},{66, -0.412},{67, -0.439},{68, -0.467},
{69, -0.495},{70, -0.524},{71, -0.553},{72, -0.582},{73, -0.612},{74, -0.643},
{75, -0.674},{76, -0.706},{77, -0.739},{78, -0.772},{79, -0.806},{80, -0.841},
{81, -0.878},{82, -0.915},{83, -0.954},{84, -0.994},{85, -1.036},{86, -1.080},
{87, -1.126},{88, -1.175},{89, -1.227},{90, -1.282},{91, -1.341},{92, -1.405},
{93, -1.476},{94, -1.555},{95, -1.645},{96, -1.751},{97, -1.881},{98, -2.054},
{99, -2.237}};
CQFunction::CQFunction(void)
{
}

CQFunction::~CQFunction(void)
{
}

double CQFunction::QFunction(double inValue)
{
	double dRet = 0.0;
	double dTemp = fabs(inValue);

	if(dTemp >= m_QTable[QTABLE_NUM-1].dx)
	{
		dRet = m_QTable[QTABLE_NUM-1].dy + (dTemp - m_QTable[QTABLE_NUM-1].dx)
			   *( m_QTable[QTABLE_NUM-1].dy -  m_QTable[QTABLE_NUM-2].dy)/
			   ( m_QTable[QTABLE_NUM-1].dx -  m_QTable[QTABLE_NUM-2].dx);
	}
	else
	{
		for(int i=1; i<QTABLE_NUM; i++)
		{
			if( (dTemp >= m_QTable[i-1].dx) && (dTemp < m_QTable[i].dx) )
			{
				dRet = (dTemp - m_QTable[i-1].dx)*(m_QTable[i].dy - m_QTable[i-1].dy)/(m_QTable[i].dx - m_QTable[i-1].dx)
					   + m_QTable[i-1].dy;
				break;
			}
		}
	}

	if(inValue < 0)  //Q(-x) = 1 - Q(x)
	{
		dRet = 1.0 - dRet;
	}
	return dRet;
}

double CQFunction::InverseQFunction(double inValue)
{
	double dRet = 0.0;
	double dTemp = inValue;

	if(inValue <= m_QITable[0].dx)
	{
		dRet = m_QITable[0].dy;
	}
	else if(inValue >= m_QITable[QITABLE_NUM-1].dx)
	{
		dRet = m_QITable[QITABLE_NUM-1].dy;
	}
	else
	{
		for(int i=1; i<QITABLE_NUM; i++)
		{
			if(inValue < m_QITable[i].dx)
			{
				dRet = (inValue - m_QITable[i-1].dx)*(m_QITable[i].dy - m_QITable[i-1].dy)/
					   (m_QITable[i].dx - m_QITable[i-1].dx) + m_QITable[i-1].dy;
				break;
			}

		}
	}

    return dRet;
}
